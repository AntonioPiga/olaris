# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
version: '3'

vars:
  DRY: false
  INGRESS: "https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml"


dotenv:
- ../../env.src

env:
  DATADIR:
    sh: echo $HOME/.nuv/kind

tasks:
  version:
    cmds:
    - kind version
    
  cluster: 
    cmds:
    - mkdir -p $DATADIR
    - envsubst -i kind.yaml -o _kind.yaml
    - |
      if {{.DRY}}
      then cat _kind.yaml
      else kind create cluster --wait=1m --name=nuvolaris --config=_kind.yaml
      fi

  ingress: 
  - kubectl apply -f "{{.INGRESS}}"

  preload:
  - docker pull $OPERATOR_IMAGE:$OPERATOR_TAG
  - kind load docker-image -n nuvolaris $OPERATOR_IMAGE:$OPERATOR_TAG 
  - docker pull $CONTROLLER_IMAGE:$CONTROLLER_TAG
  - kind load docker-image -n nuvolaris $CONTROLLER_IMAGE:$CONTROLLER_TAG
  - docker pull $COUCHDB_IMAGE:$COUCHDB_TAG
  - kind load docker-image -n nuvolaris $COUCHDB_IMAGE:$COUCHDB_TAG
  - docker pull $NODEJS_IMAGE:$NODEJS_TAG
  - kind load docker-image -n nuvolaris $NODEJS_IMAGE:$NODEJS_TAG
  - docker pull $PYTHON_IMAGE:$PYTHON_TAG
  - kind load docker-image -n nuvolaris $PYTHON_IMAGE:$PYTHON_TAG
  
  create:
    desc: create the Nuvolaris cluster in Docker
    cmds:
    - task: cluster
    - task: ingress
    - task: preload
    - task: use
    status:
    - kind get clusters | grep nuvolaris

  delete:
    desc: destroy the Nuvolaris cluster in Docker
    cmds:
    - kind delete clusters nuvolaris

  use:
    desc: use the Nuvolaris cluster in Docker
    cmds:
    - kind export kubeconfig --name=nuvolaris

  status:
    silent: true
    desc: status of the Nuvolaris cluster in Docker
    cmds:
    - |
      if kind get clusters | grep nuvolaris
      then echo Cluster Nuvolaris up and running
      else echo Cluster Nuvolaris not found
      fi
