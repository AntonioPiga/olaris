# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'
tasks:
  
  default:
    silent: true
    cmds:
    - |
      if {{.__devcluster}} 
      then nuv setup local
      fi

  get-cert-manager:
    cmds:
    - curl https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml >cert-manager.yaml

  local:
    silent: true
    cmds:
    - nuv setup docker create
    - nuv setup kubernetes create
    - nuv setup nuvolaris login

  use-context:
    silent: true
    cmds: 
    - |
      if test -n "{{._context_}}"
      then  if kubectl config use-context "{{._context_}}"
            then kubectl config get-contexts
            else false
            fi
      fi
      kubectl config get-contexts 

  cluster:
    silent: true
    cmds:
    - task: use-context
    - nuv setup kubernetes create
    - nuv setup nuvolaris login

  server:
    silent: false
    cmds:
    - nuv setup apihost {{._server_}}
    - |
      mkdir -p ~/.kube
      k3sup install --host={{._server_}} --user="$USER" \
      --local-path=~/.kube/config --merge --context=k3s
      kubectl config use-context k3s
    - kubectl apply -f cert-manager.yaml
    - nuv setup kubernetes create
    - nuv setup nuvolaris login
    env:
      USER:
        sh: if test -z "{{._user_}}"; then echo root ; else echo "{{._user_}}" ; fi

  configure:
    silent: true
    cmds:
    - |
      if {{.__all}}
      then cat <<EOF >_env
      ENABLE_REDIS=true
      ENABLE_MONGO=true
      ENABLE_MINIO=true
      ENABLE_CRON=true
      ENABLE_STATIC=true      
      EOF
      else cat <<EOF >_env
      ENABLE_REDIS={{.__redis}}
      ENABLE_MONGO={{.__mongo}}
      ENABLE_MINIO={{.__minio}}
      ENABLE_CRON={{.__cron}}
      ENABLE_STATIC={{.__static}}
      EOF
      fi

  apihost:
    silent: true
    cmds:
    - |
      if test -n "{{._apihost_}}"
      then echo APIHOST={{._apihost_}} >_apihost
      fi

  status:
    silent: true
    cmds:
    - |
      echo "*** Configuration ***"
      if test -e _env 
      then cat _env  
      fi
      if test -e _apihost 
      then cat _apihost
      fi

  clean:
    silent: true
    cmds:
    - task: use-context
    - |
      if {{.__local}}
      then nuv setup docker delete
      else nuv setup kubernetes delete
      fi
