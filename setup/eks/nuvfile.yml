# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

vars:
  D: ""
  RUN: '{{if eq .D ""}}{{else}}echo RUN:{{end}}'
  CAT: '{{if eq .D ""}}true{{else}}cat{{end}}'
  DATA: '{{if eq .D ""}}>_data_{{else}}echo DATA:{{end}}'
  _DATA: '{{if eq .D ""}}$(cat _data_){{else}}\$DATA{{end}}'
  TMP: '{{if eq .D ""}}$NUV_TMP{{else}}\$NUV_TMP{{end}}'
  MAX: 100
  TIMEOUT: 5

env:
  KUBECONFIG: 
    sh: |-
        if test -e $NUV_TMP/kubeconfig
        then echo $NUV_TMP/kubeconfig
        else echo ~/.kube/config
        fi

tasks:

  update-yaml:
    cmds:
    - curl -L https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml >cert-manager.yaml
    - curl -L "https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml" >ingress-deploy.yaml

  wait:
    #desc: util wait for objects - user OBJECT= to specify what
    silent: true
    cmds:
    - |
      echo "Waiting for {{.OBJECT}}"
      while ! {{.RUN}} kubectl get {{.OBJECT}} 2>/dev/null
      do sleep {{.TIMEOUT}}
      done
    - |
      N=0
      RES=false
      while [[ $N -lt {{.MAX}} ]]
      do 
          echo "$((N++)) Waiting for {{.OBJECT}} ready"
          if {{.RUN}} kubectl get {{.OBJECT}} 2>/dev/null
          then 
              RES=true
              break
          else
              sleep {{.TIMEOUT}}
          fi
      done
      $RES

  status:
    silent: true
    cmds:
    - kubectl get nodes

  config:
    silent: true
    desc: extract kubeconfig
    cmds:
    - rm {{.TMP}}/kubeconfig
    - eksctl utils write-kubeconfig --cluster=$EKS_NAME --kubeconfig {{.TMP}}/kubeconfig

  prereq:
    #desc: check prerequisites
    silent: true
    cmds:
    - test -n "$EKS_NAME" || die 'Please, first configure EKS with "nuv setup config eks"'
    - "{{.RUN}} aws --version || die 'You need to install and configure aws cli tool before running this command.'"
    - "{{.RUN}} aws ec2 describe-key-pairs --key-names $EKS_SSHKEY --query 'KeyPairs[*].{KeyName: KeyName}' --output table || die 'Please generate or import the configured key  before continuing.'"

  build:
    silent: true
    #desc: install EKS using eksctl CLI
    cmds:
      - "{{.RUN}} envsubst -i eks-cluster.yml  -o _eks-cluster.yml"
      - "{{.RUN}} eksctl create cluster -f _eks-cluster.yml --kubeconfig {{.TMP}}/kubeconfig"

  ingress-and-cert:
    silent: true
    #desc: install cert-manager
    cmds:
      - "{{.RUN}} kubectl apply -f cert-manager.yaml"
      - "{{.RUN}} kubectl apply -f ingress-deploy.yaml"

  wait-ingress-lb:
    desc: wait for EKS managed LB hostname availability
    silent: true
    cmds:
    - |
      while true
      do
          echo "waiting for EKS LB hostname assignment..."
          {{.DATA}} kubectl -n ingress-nginx get service/ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          if [[ -z "{{._DATA}}" ]]; 
          then sleep {{.TIMEOUT}}
          else break
          fi
      done

  apihost:
    cmds:
    - echo EKS NLB hostname $EKS_LB_HOSTNAME
    - |
      while true
      do
          echo "Resolving EKS NLB ip addresses..."
          EKS_IP=$(dig +short $EKS_LB_HOSTNAME|awk '{ print ; exit}'|sed -e "s/\./-/g")
          if [[ -z "$EKS_IP" ]]; 
          then sleep {{.TIMEOUT}}
          else break
          fi
      done
    - nuv setup apihost api.$(dig +short $EKS_LB_HOSTNAME|awk '{ print ; exit}'|sed -e "s/\./-/g").nip.io
    env:
      EKS_LB_HOSTNAME:
        sh:
          kubectl -n ingress-nginx get service/ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"

  create:
    silent: true
    desc: create a EKS cluster
    cmds:
    - task: prereq
    - task: build
    - task: wait
      vars:
        OBJECT: nodes
    - task: ingress-and-cert

  delete:
    silent: true
    desc: uninstall the EKS cluster
    cmds:
    - echo "*** Deleting the Cluster"
    - "{{.RUN}} kubectl delete -f cert-manager.yaml"
    - "{{.RUN}} kubectl delete -f ingress-deploy.yaml"
    - "{{.RUN}} eksctl delete cluster -f _eks-cluster.yml --disable-nodegroup-eviction"
    - "{{.RUN}} rm $NUV_TMP/kubeconfig"
    ignore_error: true


