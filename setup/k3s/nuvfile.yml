# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

vars:
  CTX: k3s-nuvolaris

env:

  _SERVER:
    sh: |-
        if test -z "{{.SERVER}}"
        then echo localhost
        else echo "{{.SERVER}}"
        fi

  _USERNAME:
    sh: |-
        if test -z "{{.USERNAME}}" 
        then echo root
        else echo "{{.USERNAME}}"
        fi

tasks:

  info: echo SERVER=${_SERVER} USERNAME=${_USERNAME}

  get-cert-manager:
    cmds:
    - curl -L https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml >cert-manager.yaml

  prepare:
    silent: true
    desc: prepare
    cmds:
    - nuv setup apihost $SERVER
    - mkdir -p ~/.kube
    - |
      if kubectl config get-contexts | grep '{{.CTX}}'
      then  echo there is already a {{.CTX}} context 
            echo please remove it from kubeconfig and retry
            exit 1 
      fi


  install:
    silent: true
    desc: install
    cmds:
      - >
        k3sup install --context={{.CTX}}
        --host="$_SERVER" --user="$_USERNAME"
        --local-path=~/.kube/config --merge
      - kubectl config use-context {{.CTX}}
  
  cert-manager:
    silent: true
    desc: install cert-manager
    cmds:
    - kubectl config use-context {{.CTX}}
    - kubectl apply -f cert-manager.yaml

  create:
    silent: true
    desc: create a k3s in server
    cmds:
    - task: prepare
    - task: install
    - task: cert-manager
  
  status:
    silent: true
    cmds:
    - kubectl get nodes

  delete:
    desc: uninstall
    cmds:
    - echo ssh -o StrictHostKeyChecking=no "$_USER@$_SERVER" sudo /usr/local/bin/k3s-uninstall.sh
    ignore_error: true
  