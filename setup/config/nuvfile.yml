# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'
vars:
  VAR: ""
  MSG: ""
  VAL: ""

tasks:
  
  apihost:
    silent: true
    cmds:
    - config NUVOLARIS_APIHOST="{{._apihost_}}"
    - config -dump | grep NUVOLARIS_APIHOST

  tls:
    silent: true
    cmds:
    - |
      if test "{{._email_}}" = "none"
      then config NUVOLARIS_TLSEMAIL="none" NUVOLARIS_TLS=false
      else config NUVOLARIS_TLSEMAIL="{{._email_}}" NUVOLARIS_TLS=true
      fi
    - config -dump | grep NUVOLARIS_TLS
        
  enable:
    silent: true
    cmds:
    - |
      if {{.__redis}} || {{.__all}}
      then config NUVOLARIS_REDIS=true
      fi
      if {{.__mongodb}} || {{.__all}}
      then config NUVOLARIS_MONGODB=true
      fi
      if {{.__minio}} || {{.__all}}
      then config NUVOLARIS_MINIO=true
      fi
      if {{.__cron}} || {{.__all}}
      then config NUVOLARIS_CRON=true
      fi
      if {{.__static}} || {{.__all}}
      then config NUVOLARIS_STATIC=true
      fi
    - task: status

  disable:
    silent: true
    cmds:
    - |
      if {{.__redis}} || {{.__all}}
      then config NUVOLARIS_REDIS=false
      fi
      if {{.__mongodb}} || {{.__all}}
      then config NUVOLARIS_MONGODB=false
      fi
      if {{.__minio}} || {{.__all}}
      then config NUVOLARIS_MINIO=false
      fi
      if {{.__cron}} || {{.__all}}
      then config NUVOLARIS_CRON=false
      fi
      if {{.__static}} || {{.__all}}
      then config NUVOLARIS_STATIC=false
      fi
    - task: status

  status:
    silent: true
    cmds:
    - cmd: config -dump | grep NUVOLARIS_
      ignore_error: true
    - cmd: config -dump | grep AKS_
      ignore_error: true
    - cmd: config -dump | grep EKS_
      ignore_error: true

  export:
    silent: true
    cmds:
    - config -dump | awk '{print "export "$0}'
    - |
      echo NUV_TMP=$NUV_TMP
      echo 'DATA:() {' 
      echo '  DATA="$(eval $@)"' 
      echo '}'
      echo alias RUN:=

  reset:
    silent: true
    cmds:
    - rm ~/.nuv/config.json
    - config -dump

  read:
    silent: true
    cmds:
    - test -n "{{.VAR}}" || die "specify variable VAR="
    - test -n "{{.MSG}}" || die "specify message MSG="
    - test -n "{{.MSG}}" || die "specify default DEF="
    - |
      if test -z "{{.VAL}}"
      then  
        echo "*** Please, specify {{.MSG}} and press enter."
        test -n "{{.HINT}}" && echo "{{.HINT}}"
        if test -z "${{.VAR}}"
        then def="{{.DEF}}"
        else def="${{.VAR}}"
        fi
        echo "Just press enter for default ($def): "
        read input
        if test -z "$input"
        then input="$def"
        fi
      else input="{{.VAL}}"
      fi
      config {{.VAR}}="$input"

  aks:
    silent: true
    cmds:
    - task: read
      vars:
        MSG: "AKS Name for Cluster and Resource Group"
        VAR: "AKS_NAME"
        VAL: "{{.__name}}"
        DEF: "nuvolaris"
    - task: read
      vars:
        MSG: "AKS number of worker nodes"
        VAR: "AKS_COUNT"
        VAL: "{{.__count}}"
        DEF: "3"
    - task: read
      vars:
        MSG: "AKS location"
        HINT: >
              To get a list of valid values use:
                az account list-locations -o table
        VAR: "AKS_REGION"
        VAL: "{{.__region}}"
        DEF: "eastus"
    - task: read
      vars:
        MSG: "AKS virtual machine type"
        HINT: > 
              To get a list of valid values use:
                az vm list-sizes --location <location> -o table
              where <location> is your current location.
        VAR: "AKS_VM"
        VAL: "{{.__vm}}"
        DEF: "Standard_B4ms"
    - task: read
      vars:
        MSG: "AKS disk size in gigabyte"
        VAR: "AKS_DISK"
        VAL: "{{.__disk}}"
        DEF: "100"
    - task: read
      vars:
          MSG: "AKS public SSH key in AWS"
          HINT: >
                If you already have a public SSH key provide its path here.
                If you do not have it, generate a key pair with the following command:
                  ssh-keygen
                The public key defaults to ~/.ssh/id_rsa.pub.
          VAR: "AKS_SSHKEY"
          VAL: "{{.__key}}"
          DEF: "~/.ssh/id_rsa.pub"          
    - config -d | grep AKS_

  eks:
    silent: true
    cmds:
    - task: read
      vars:
        MSG: "EKS Name for Cluster and Node Group"
        VAR: "EKS_NAME"
        VAL: "{{.__name}}"
        DEF: "nuvolaris"
    - task: read
      vars:
        MSG: "EKS region"
        HINT: > 
              To get a list of valid values use:
                aws ec2 describe-regions --output table
        VAR: "EKS_REGION"
        VAL: "{{.__region}}"
        DEF: "us-east-1"
    - task: read
      vars:
        MSG: "EKS number of worker nodes"
        VAR: "EKS_COUNT"
        VAL: "{{.__count}}"
        DEF: "3"
    - task: read
      vars:
        MSG: "EKS virtual machine type"
        HINT: >
              To get a list of valid values, use:
                aws ec2 describe-instance-types --query 'InstanceTypes[].InstanceType' --output table 
        VAR: "EKS_VM"
        VAL: "{{.__vm}}"
        DEF: "m5.xlarge"
    - task: read
      vars:
        MSG: "EKS disk size in gigabyte"
        VAR: "EKS_DISK"
        VAL: "{{.__disk}}"
        DEF: "100"
    - task: read
      vars:
        MSG: "EKS public SSH key in AWS"
        HINT: >
              If you already have a public SSH key in AWS, provide its name here.
              If you do not have it, generate a key pair with the following command:
                ssh-keygen
              The public key defaults to ~/.ssh/id_rsa.pub and you can import with:
                aws ec2 import-key-pair --key-name nuvolaris-key --public-key-material fileb://~/.ssh/id_rsa.pub
        VAR: "EKS_SSHKEY"
        VAL: "{{.__key}}"
        DEF: "nuvolaris-key"
    - task: read
      vars:
        MSG: "EKS Kubernetes Version"
        VAR: "EKS_KUBERNETES_VERSION"
        VAL: "{{.__kubever}}"
        DEF: "1.25"
    - config -d | grep EKS_

